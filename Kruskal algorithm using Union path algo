//CPP14 code here
#include<bits/stdc++.h>
using namespace std;
 
struct Edge 
{ 
    int src, dest, weight; 
}; 

vector< pair< int, int > > mapp;
int n, e ;
 

int find(int i) 
{ 
    if (mapp[i].first != i) 
    mapp[i].first = find(mapp[i].first); 
   
    return mapp[i].first; 
} 
 
void dounion(int x,int y)
{
    int xroot = find(x); 
    int yroot = find(y); 
     
    if (mapp[xroot].second < mapp[yroot].second) 
    mapp[xroot].first = yroot; 
     
    else if (mapp[xroot].second > mapp[yroot].second) 
    mapp[yroot].first = xroot; 
   
    else
    { 
        mapp[yroot].first = xroot; 
        mapp[xroot].second+=1; 
    } 
}

bool cmp(Edge x, Edge y) 
{
	return x.weight < y.weight ;
}
 
void kruskal(struct Edge edge[])
{
	struct Edge result[n];  // Tnis will store the resultant MST 
    int e = 0;  // An index variable, used for result[] 
    int i = 0;  // An index variable, used for sorted edges 
     
    while (e < n - 1) 
    { 
        // Step 2: Pick the smallest edge. And increment  
        // the index for next iteration 
        struct Edge next_edge = edge[i++]; 
  
        int x = find(next_edge.src); 
        int y = find(next_edge.dest); 
  
        // If including this edge does't cause cycle, 
        // include it in result and increment the index  
        // of result for next edge 
        if (x != y) 
        { 
            result[e++] = next_edge; 
            dounion(x, y); 
        } 
        // Else discard the next_edge 
    } 
  
    // print the contents of result[] to display the 
    // built MST 
    printf("Following are the edges in the constructed MST\n"); 
    for (i = 0; i < e; ++i) 
    printf("%d -- %d == %d\n", result[i].src, result[i].dest, result[i].weight); 
         
}
 
int main()
{
    n = 3 , e = 3 ;
     
    struct Edge edge[e];
    
    edge[0].src = 0; 
    edge[0].dest = 1; 
    edge[0].weight = 10; 
  
    // add edge 0-2 
    edge[1].src = 0; 
    edge[1].dest = 2; 
    edge[1].weight = 6; 
  
    // add edge 0-3 
    edge[2].src = 0; 
    edge[2].dest = 3; 
    edge[2].weight = 5; 
  
    // add edge 1-3 
    edge[3].src = 1; 
    edge[3].dest = 3; 
    edge[3].weight = 15; 
  
    // add edge 2-3 
    edge[4].src = 2; 
    edge[4].dest = 3; 
    edge[4].weight = 4; 
     
    for( int i=0; i<n; i++ )
    mapp.push_back( make_pair(i,0) ) ;      // mapp->first denotes parent , mapp->second is rank 
     
    sort(edge, edge + e, cmp);  // sorting acc to weight
    kruskal(edge);
     
}
